Create a simple project where:
The state manages a user’s profile (name, email).
The props pass this data from the parent component to a child component.
There is an event handler to change the profile data on form submission.
Use conditional rendering to show a message when the user is logged in or out.
Simple Project Structure:
src/
│
├── components/
│   ├── ProfileForm.js  # Form for updating user profile
│   └── UserProfile.js  # Component to display the user's profile
│
├── App.js              # Parent component managing state and props
└── index.js            # Main entry point


solution -
Step 1: Create the UserProfile Component
The UserProfile component will display the user's name and email. It will receive the profile data via props from the parent (App.js).
// src/components/UserProfile.js
import React from 'react';

function UserProfile({ user }) {
  return (
    <div>
      <h2>User Profile</h2>
      <p>Name: {user.name}</p>
      <p>Email: {user.email}</p>
    </div>
  );
}

export default UserProfile;
Step 2: Create the ProfileForm Component
The ProfileForm component will allow the user to update their name and email. It will use event handling to capture and submit the form data, which will then be passed up to the parent component to update the state.
// src/components/ProfileForm.js
import React, { useState } from 'react';

function ProfileForm({ updateUser }) {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    // Send updated data back to parent component
    updateUser({ name, email });
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Update Profile</h2>
      <div>
        <label>Name:</label>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Enter name"
        />
      </div>
      <div>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Enter email"
        />
      </div>
      <button type="submit">Update Profile</button>
    </form>
  );
}

export default ProfileForm;
Step 3: Create the App.js Component
In App.js, manage the user profile using state. This component will handle the login/logout functionality and manage profile updates through event handling and conditional rendering.
// src/App.js
import React, { useState } from 'react';
import UserProfile from './components/UserProfile';
import ProfileForm from './components/ProfileForm';

function App() {
  const [user, setUser] = useState({ name: 'John Doe', email: 'john@example.com' });
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  // Function to update user profile
  const updateUser = (updatedUser) => {
    setUser(updatedUser);
  };

  // Function to toggle login/logout
  const toggleLogin = () => {
    setIsLoggedIn(!isLoggedIn);
  };

  return (
    <div>
      <h1>User Profile Management</h1>

      {/* Conditional rendering based on login state */}
      {isLoggedIn ? (
        <>
          <UserProfile user={user} />
          <ProfileForm updateUser={updateUser} />
          <button onClick={toggleLogin}>Log Out</button>
        </>
      ) : (
        <div>
          <p>Please log in to update your profile</p>
          <button onClick={toggleLogin}>Log In</button>
        </div>
      )}
    </div>
  );
}

export default App;
Step 4: Entry Point (index.js)
This is the entry point for your React application where the App component will be rendered into the DOM.
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

How It Works:
State Management:

The App.js component manages the user's profile (name and email) and the logged-in state (isLoggedIn).
The setUser function updates the user state with the new profile data passed from the ProfileForm.
Props:

The UserProfile component receives the user object via props from the parent App component and displays the user's name and email.
Event Handling:

The ProfileForm component uses controlled components (form inputs) to capture the user’s name and email.
The handleSubmit function sends the updated profile data to the parent component when the form is submitted.
Conditional Rendering:

If the user is logged in (isLoggedIn is true), the UserProfile and ProfileForm are shown, allowing the user to view and update their profile.
If the user is not logged in (isLoggedIn is false), a "Please log in" message and a login button are displayed.